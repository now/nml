# Autogenerated from a Treetop grammar. Edits may be lost.


module NML::Grammar::Parsers::Block
  module Definitions1
    include Treetop::Runtime

    def root
      @root ||= :definitions1
    end

    include Blocks2

    include Common

    include Inlines1

    module Definitions10
      def definition
        elements[1]
      end
    end

    module Definitions11
      def first
        elements[0]
      end

      def rest
        elements[1]
      end
    end

    def _nt_definitions1
      start_index = index
      if node_cache[:definitions1].has_key?(index)
        cached = node_cache[:definitions1][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_definition1
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          s4, i4 = [], index
          loop do
            r5 = _nt_blankline
            if r5
              s4 << r5
            else
              break
            end
          end
          if s4.empty?
            @index = i4
            r4 = nil
          else
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          end
          s3 << r4
          if r4
            r6 = _nt_definition1
            s3 << r6
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(Definitions10)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Definitions,input, i0...index, s0)
        r0.extend(Definitions11)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:definitions1][start_index] = r0

      r0
    end

    module Definition10
      def terms
        elements[0]
      end

      def definition
        elements[1]
      end
    end

    def _nt_definition1
      start_index = index
      if node_cache[:definition1].has_key?(index)
        cached = node_cache[:definition1][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_terms1
      s0 << r1
      if r1
        r2 = _nt_blocks2
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Definition,input, i0...index, s0)
        r0.extend(Definition10)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:definition1][start_index] = r0

      r0
    end

    module Terms10
      def term
        elements[1]
      end
    end

    module Terms11
      def first
        elements[0]
      end

      def rest
        elements[1]
      end
    end

    def _nt_terms1
      start_index = index
      if node_cache[:terms1].has_key?(index)
        cached = node_cache[:terms1][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_term1
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          if has_terminal?("\n", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\n")
            r4 = nil
          end
          s3 << r4
          if r4
            r5 = _nt_term1
            s3 << r5
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(Terms10)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Terms,input, i0...index, s0)
        r0.extend(Terms11)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:terms1][start_index] = r0

      r0
    end

    module Term10
      def inlines
        elements[1]
      end
    end

    def _nt_term1
      start_index = index
      if node_cache[:term1].has_key?(index)
        cached = node_cache[:term1][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('= ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('= ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_strictinlines1
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Term,input, i0...index, s0)
        r0.extend(Term10)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:term1][start_index] = r0

      r0
    end

  end

  class Definitions1Parser < Treetop::Runtime::CompiledParser
    include Definitions1
  end

end
