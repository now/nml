# Autogenerated from a Treetop grammar. Edits may be lost.


module NML::Grammar::Parsers::Block
  module Definitions3
    include Treetop::Runtime

    def root
      @root ||= :definitions3
    end

    include Common

    include Inlines3

    include Inlines4

    module Definitions30
      def definition
        elements[1]
      end
    end

    module Definitions31
      def first
        elements[0]
      end

      def rest
        elements[1]
      end
    end

    def _nt_definitions3
      start_index = index
      if node_cache[:definitions3].has_key?(index)
        cached = node_cache[:definitions3][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_definition3
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          s4, i4 = [], index
          loop do
            r5 = _nt_blankline
            if r5
              s4 << r5
            else
              break
            end
          end
          if s4.empty?
            @index = i4
            r4 = nil
          else
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          end
          s3 << r4
          if r4
            r6 = _nt_definition3
            s3 << r6
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(Definitions30)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Definitions,input, i0...index, s0)
        r0.extend(Definitions31)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:definitions3][start_index] = r0

      r0
    end

    module Definition30
      def terms
        elements[0]
      end

      def definition
        elements[1]
      end
    end

    def _nt_definition3
      start_index = index
      if node_cache[:definition3].has_key?(index)
        cached = node_cache[:definition3][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_terms3
      s0 << r1
      if r1
        r2 = _nt_definitionblocks4
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Definition,input, i0...index, s0)
        r0.extend(Definition30)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:definition3][start_index] = r0

      r0
    end

    module Terms30
      def term
        elements[1]
      end
    end

    module Terms31
      def first
        elements[0]
      end

      def rest
        elements[1]
      end
    end

    def _nt_terms3
      start_index = index
      if node_cache[:terms3].has_key?(index)
        cached = node_cache[:terms3][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_term3
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          if has_terminal?("\n", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\n")
            r4 = nil
          end
          s3 << r4
          if r4
            r5 = _nt_term3
            s3 << r5
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(Terms30)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Terms,input, i0...index, s0)
        r0.extend(Terms31)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:terms3][start_index] = r0

      r0
    end

    module Term30
      def inlines
        elements[1]
      end
    end

    def _nt_term3
      start_index = index
      if node_cache[:term3].has_key?(index)
        cached = node_cache[:term3][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('    = ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('    = ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_strictinlines3
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Term,input, i0...index, s0)
        r0.extend(Term30)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:term3][start_index] = r0

      r0
    end

    module Definitionblocks40
      def block
        elements[1]
      end
    end

    def _nt_definitionblocks4
      start_index = index
      if node_cache[:definitionblocks4].has_key?(index)
        cached = node_cache[:definitionblocks4][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        i1, s1 = index, []
        if has_terminal?('', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 0))
          @index += 0
        else
          terminal_parse_failure('')
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_definitionparagraph4
          s1 << r3
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(Definitionblocks40)
        else
          @index = i1
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
        if s0.size == 1
          break
        end
      end
      if s0.size < 1
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Blocks,input, i0...index, s0)
      end

      node_cache[:definitionblocks4][start_index] = r0

      r0
    end

    module Definitionparagraph40
      def inlines
        elements[1]
      end
    end

    def _nt_definitionparagraph4
      start_index = index
      if node_cache[:definitionparagraph4].has_key?(index)
        cached = node_cache[:definitionparagraph4][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("\n        ", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
        @index += 9
      else
        terminal_parse_failure("\n        ")
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inlines4
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(NML::Grammar::Nodes::Block::Paragraph,input, i0...index, s0)
        r0.extend(Definitionparagraph40)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:definitionparagraph4][start_index] = r0

      r0
    end

  end

  class Definitions3Parser < Treetop::Runtime::CompiledParser
    include Definitions3
  end

end
